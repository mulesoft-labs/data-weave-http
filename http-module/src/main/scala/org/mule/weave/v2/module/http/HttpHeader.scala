package org.mule.weave.v2.module.http

object HttpHeader {
  val ACCEPT_HEADER = "Accept"
  val ACCEPT_CHARSET_HEADER = "Accept-Charset"
  val ACCEPT_ENCODING_HEADER = "Accept-Encoding"
  val ACCEPT_LANGUAGE_HEADER = "Accept-Language"
  val ACCEPT_RANGES_HEADER = "Accept-Ranges"
  val AGE_HEADER = "Age"
  val ALLOW_HEADER = "Allow"
  val AUTHENTICATION_INFO_HEADER = "Authentication-Info"
  val AUTHORIZATION_HEADER = "Authorization"
  val CACHE_CONTROL_HEADER = "Cache-Control"
  val COOKIE_HEADER = "Cookie"
  val COOKIE2_HEADER = "Cookie2"
  val CONNECTION_HEADER = "Connection"
  val CONTENT_DISPOSITION_HEADER = "Content-Disposition"
  val CONTENT_ENCODING_HEADER = "Content-Encoding"
  val CONTENT_LANGUAGE_HEADER = "Content-Language"
  val CONTENT_LENGTH_HEADER = "Content-Length"
  val CONTENT_LOCATION_HEADER = "Content-Location"
  val CONTENT_MD5_HEADER = "Content-MD5"
  val CONTENT_RANGE_HEADER = "Content-Range"
  val CONTENT_TYPE_HEADER = "Content-Type"
  val DATE_HEADER = "Date"
  val ETAG_HEADER = "ETag"
  val EXPECT_HEADER = "Expect"
  val EXPIRES_HEADER = "Expires"
  val FROM_HEADER = "From"
  val HOST_HEADER = "Host"
  val IF_MATCH_HEADER = "If-Match"
  val IF_MODIFIED_SINCE_HEADER = "If-Modified-Since"
  val IF_NONE_MATCH_HEADER = "If-None-Match"
  val IF_RANGE_HEADER = "If-Range"
  val IF_UNMODIFIED_SINCE_HEADER = "If-Unmodified-Since"
  val LAST_MODIFIED_HEADER = "Last-Modified"
  val LOCATION_HEADER = "Location"
  val MAX_FORWARDS_HEADER = "Max-Forwards"
  val ORIGIN_HEADER = "Origin"
  val PRAGMA_HEADER = "Pragma"
  val PROXY_AUTHENTICATE_HEADER = "Proxy-Authenticate"
  val PROXY_AUTHORIZATION_HEADER = "Proxy-Authorization"
  val RANGE_HEADER = "Range"
  val REFERER_HEADER = "Referer"
  val REFRESH_HEADER = "Refresh"
  val RETRY_AFTER_HEADER = "Retry-After"
  val SEC_WEB_SOCKET_ACCEPT_HEADER = "Sec-WebSocket-Accept"
  val SEC_WEB_SOCKET_EXTENSIONS_HEADER = "Sec-WebSocket-Extensions"
  val SEC_WEB_SOCKET_KEY_HEADER = "Sec-WebSocket-Key"
  val SEC_WEB_SOCKET_KEY1_HEADER = "Sec-WebSocket-Key1"
  val SEC_WEB_SOCKET_KEY2_HEADER = "Sec-WebSocket-Key2"
  val SEC_WEB_SOCKET_LOCATION_HEADER = "Sec-WebSocket-Location"
  val SEC_WEB_SOCKET_ORIGIN_HEADER = "Sec-WebSocket-Origin"
  val SEC_WEB_SOCKET_PROTOCOL_HEADER = "Sec-WebSocket-Protocol"
  val SEC_WEB_SOCKET_VERSION_HEADER = "Sec-WebSocket-Version"
  val SERVER_HEADER = "Server"
  val SERVLET_ENGINE_HEADER = "Servlet-Engine"
  val SET_COOKIE_HEADER = "Set-Cookie"
  val SET_COOKIE2_HEADER = "Set-Cookie2"
  val SSL_CLIENT_CERT_HEADER = "SSL_CLIENT_CERT"
  val SSL_CIPHER_HEADER = "SSL_CIPHER"
  val SSL_SESSION_ID_HEADER = "SSL_SESSION_ID"
  val SSL_CIPHER_USEKEYSIZE_HEADER = "SSL_CIPHER_USEKEYSIZE"
  val STATUS_HEADER = "Status"
  val STRICT_TRANSPORT_SECURITY_HEADER = "Strict-Transport-Security"
  val TE_HEADER = "TE"
  val TRAILER_HEADER = "Trailer"
  val TRANSFER_ENCODING_HEADER = "Transfer-Encoding"
  val UPGRADE_HEADER = "Upgrade"
  val USER_AGENT_HEADER = "User-Agent"
  val VARY_HEADER = "Vary"
  val VIA_HEADER = "Via"
  val WARNING_HEADER = "Warning"
  val WWW_AUTHENTICATE_HEADER = "WWW-Authenticate"
  val X_FORWARDED_FOR_HEADER = "X-Forwarded-For"
  val X_FORWARDED_PROTO_HEADER = "X-Forwarded-Proto"
  val X_FORWARDED_HOST_HEADER = "X-Forwarded-Host"
  val X_FORWARDED_PORT_HEADER = "X-Forwarded-Port"
  val X_DISABLE_PUSH_HEADER = "X-Disable-Push"
  val X_FORWARDED_SERVER_HEADER = "X-Forwarded-Server"
}
